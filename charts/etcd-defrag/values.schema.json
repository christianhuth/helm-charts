{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "properties": {
    "affinity": {
      "description": "Affinity settings for pod assignment",
      "required": [],
      "title": "affinity",
      "type": "object"
    },
    "defrag": {
      "properties": {
        "config": {
          "properties": {
            "auth": {
              "properties": {
                "enabled": {
                  "default": false,
                  "description": "use username and password for authentication against etcd",
                  "required": [],
                  "title": "enabled",
                  "type": "boolean"
                },
                "existingSecret": {
                  "default": "",
                  "description": "Name of existing secret to use for authentication credentials. Key needs to be called `etcd-password`.",
                  "required": [],
                  "title": "existingSecret",
                  "type": "string"
                },
                "password": {
                  "default": "",
                  "description": "password for authentication",
                  "required": [],
                  "title": "password",
                  "type": "string"
                },
                "user": {
                  "default": "",
                  "description": "username for authentication",
                  "required": [],
                  "title": "user",
                  "type": "string"
                }
              },
              "required": [
                "enabled",
                "existingSecret",
                "password",
                "user"
              ],
              "title": "auth",
              "type": "object"
            },
            "clusterWide": {
              "default": true,
              "description": "Run defragment operations for all endpoints in the cluster associated with the default endpoint.",
              "required": [],
              "title": "clusterWide",
              "type": "boolean"
            },
            "commandTimeout": {
              "default": "",
              "description": "timeout for short running command (excluding dial timeout)",
              "required": [],
              "title": "commandTimeout",
              "type": "string"
            },
            "debug": {
              "default": false,
              "description": "enable client-side debug logging",
              "required": [],
              "title": "debug",
              "type": "boolean"
            },
            "dialTimeout": {
              "default": "",
              "description": "dial timeout for client connections",
              "required": [],
              "title": "dialTimeout",
              "type": "string"
            },
            "endpoints": {
              "description": "gRPC endpoints",
              "items": {
                "required": []
              },
              "required": [],
              "title": "endpoints",
              "type": "array"
            },
            "insecureSkipTlsVerify": {
              "default": false,
              "description": "skip server certificate verification",
              "required": [],
              "title": "insecureSkipTlsVerify",
              "type": "boolean"
            },
            "insecureTransport": {
              "default": true,
              "description": "disable transport security for client connections",
              "required": [],
              "title": "insecureTransport",
              "type": "boolean"
            },
            "pki": {
              "properties": {
                "ca": {
                  "default": "",
                  "description": "certificate authority used for the etcd certificates",
                  "required": [],
                  "title": "ca",
                  "type": "string"
                },
                "cert": {
                  "default": "",
                  "description": "identify secure client using this TLS certificate",
                  "required": [],
                  "title": "cert",
                  "type": "string"
                },
                "existingSecret": {
                  "default": "",
                  "description": "Name of existing secret with certificates. Keys needs to be called `ca`, `cert` and `key`.",
                  "required": [],
                  "title": "existingSecret",
                  "type": "string"
                },
                "hostAccess": {
                  "properties": {
                    "caFilePath": {
                      "default": "/etc/kubernetes/pki/etcd/ca.crt",
                      "description": "file on host containing the certificate authority",
                      "required": [],
                      "title": "caFilePath",
                      "type": "string"
                    },
                    "certFilePath": {
                      "default": "/etc/kubernetes/pki/etcd/server.crt",
                      "description": "file on host containing the server certificate",
                      "required": [],
                      "title": "certFilePath",
                      "type": "string"
                    },
                    "enabled": {
                      "default": false,
                      "description": "get certificates directly from host where the Pod is running",
                      "required": [],
                      "title": "enabled",
                      "type": "boolean"
                    },
                    "keyFilePath": {
                      "default": "/etc/kubernetes/pki/etcd/server.key",
                      "description": "file on host containing the server private key",
                      "required": [],
                      "title": "keyFilePath",
                      "type": "string"
                    }
                  },
                  "required": [
                    "enabled",
                    "caFilePath",
                    "certFilePath",
                    "keyFilePath"
                  ],
                  "title": "hostAccess",
                  "type": "object"
                },
                "key": {
                  "default": "",
                  "description": "identify secure client using this TLS key",
                  "required": [],
                  "title": "key",
                  "type": "string"
                }
              },
              "required": [
                "ca",
                "cert",
                "existingSecret",
                "hostAccess",
                "key"
              ],
              "title": "pki",
              "type": "object"
            },
            "writeOut": {
              "default": "table",
              "description": "set the output format: `fields`, `json`, `protobuf`, `simple`, `table`)",
              "required": [],
              "title": "writeOut",
              "type": "string"
            }
          },
          "required": [
            "auth",
            "clusterWide",
            "commandTimeout",
            "debug",
            "dialTimeout",
            "endpoints",
            "insecureSkipTlsVerify",
            "insecureTransport",
            "pki",
            "writeOut"
          ],
          "title": "config",
          "type": "object"
        },
        "cronjob": {
          "properties": {
            "concurrencyPolicy": {
              "default": "Forbid",
              "description": "Specifies how to treat concurrent executions of a Job. Valid values are: `Allow`, `Forbid` and `Replace`.",
              "required": [],
              "title": "concurrencyPolicy",
              "type": "string"
            },
            "failedJobsHistoryLimit": {
              "default": "1",
              "description": "The number of failed finished jobs to retain.",
              "required": [],
              "title": "failedJobsHistoryLimit",
              "type": "string"
            },
            "schedule": {
              "default": "0 */1 * * *",
              "description": "The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.",
              "required": [],
              "title": "schedule",
              "type": "string"
            },
            "startingDeadlineSeconds": {
              "default": "30",
              "description": "Optional deadline in seconds for starting the job if it misses scheduled time for any reason. Missed jobs executions will be counted as failed ones.",
              "required": [],
              "title": "startingDeadlineSeconds",
              "type": "string"
            },
            "successfulJobsHistoryLimit": {
              "default": "3",
              "description": "The number of successful finished jobs to retain.",
              "required": [],
              "title": "successfulJobsHistoryLimit",
              "type": "string"
            },
            "suspend": {
              "default": false,
              "description": "This flag tells the controller to suspend subsequent executions, it does not apply to already started executions.",
              "required": [],
              "title": "suspend",
              "type": "boolean"
            }
          },
          "required": [
            "concurrencyPolicy",
            "failedJobsHistoryLimit",
            "schedule",
            "startingDeadlineSeconds",
            "successfulJobsHistoryLimit",
            "suspend"
          ],
          "title": "cronjob",
          "type": "object"
        },
        "enabled": {
          "default": true,
          "description": "create a CronJob for defragmentation",
          "required": [],
          "title": "enabled",
          "type": "boolean"
        },
        "job": {
          "properties": {
            "activeDeadlineSeconds": {
              "default": "",
              "description": "Specifies the duration in seconds relative to the startTime that the job may be continuously active before the system tries to terminate it.",
              "required": [],
              "title": "activeDeadlineSeconds",
              "type": "string"
            },
            "backoffLimit": {
              "default": "",
              "description": "Specifies the number of retries before marking this job failed.",
              "required": [],
              "title": "backoffLimit",
              "type": "string"
            },
            "completionMode": {
              "default": "",
              "description": "CompletionMode specifies how Pod completions are tracked. It can be: `NonIndexed` or `Indexed`.",
              "required": [],
              "title": "completionMode",
              "type": "string"
            },
            "completions": {
              "default": "",
              "description": "Specifies the desired number of successfully finished pods the job should be run with.",
              "required": [],
              "title": "completions",
              "type": "string"
            },
            "parallelism": {
              "default": "",
              "description": "Specifies the maximum desired number of pods the job should run at any given time.",
              "required": [],
              "title": "parallelism",
              "type": "string"
            },
            "podFailurePolicy": {
              "default": "",
              "description": "Specifies the policy of handling failed pods.",
              "required": [],
              "title": "podFailurePolicy",
              "type": "string"
            },
            "suspend": {
              "default": false,
              "description": "Suspend specifies whether the Job controller should create Pods or not.",
              "required": [],
              "title": "suspend",
              "type": "boolean"
            },
            "ttlSecondsAfterFinished": {
              "default": "",
              "description": "limits the lifetime of a Job that has finished execution",
              "required": [],
              "title": "ttlSecondsAfterFinished",
              "type": "string"
            }
          },
          "required": [
            "activeDeadlineSeconds",
            "backoffLimit",
            "completionMode",
            "completions",
            "parallelism",
            "podFailurePolicy",
            "suspend",
            "ttlSecondsAfterFinished"
          ],
          "title": "job",
          "type": "object"
        },
        "pod": {
          "properties": {
            "restartPolicy": {
              "default": "OnFailure",
              "description": "Restart policy for all containers within the pod. One of `Always`, `OnFailure`, `Never`.",
              "required": [],
              "title": "restartPolicy",
              "type": "string"
            }
          },
          "required": [
            "restartPolicy"
          ],
          "title": "pod",
          "type": "object"
        }
      },
      "required": [
        "enabled",
        "config",
        "cronjob",
        "job",
        "pod"
      ],
      "title": "defrag",
      "type": "object"
    },
    "extraEnv": {
      "description": "additional environment variables to be added to the pods",
      "items": {
        "required": []
      },
      "required": [],
      "title": "extraEnv",
      "type": "array"
    },
    "extraVolumeMounts": {
      "description": "additional volume mounts to be added to the pods",
      "items": {
        "required": []
      },
      "required": [],
      "title": "extraVolumeMounts"
    },
    "extraVolumes": {
      "description": "additional volumes to be added to the pods",
      "items": {
        "required": []
      },
      "required": [],
      "title": "extraVolumes"
    },
    "fullnameOverride": {
      "default": "",
      "description": "String to fully override `\"etcd-defrag.fullname\"`",
      "required": [],
      "title": "fullnameOverride",
      "type": "string"
    },
    "global": {
      "description": "Global values are values that can be accessed from any chart or subchart by exactly the same name.",
      "required": [],
      "title": "global",
      "type": "object"
    },
    "hostNetwork": {
      "default": false,
      "description": "specify if the CronJob should run on the hostNetwork",
      "required": [],
      "title": "hostNetwork",
      "type": "boolean"
    },
    "image": {
      "properties": {
        "pullPolicy": {
          "default": "Always",
          "description": "image pull policy",
          "required": [],
          "title": "pullPolicy",
          "type": "string"
        },
        "registry": {
          "default": "quay.io",
          "description": "image registry",
          "required": [],
          "title": "registry",
          "type": "string"
        },
        "repository": {
          "default": "coreos/etcd",
          "description": "image repository",
          "required": [],
          "title": "repository",
          "type": "string"
        },
        "tag": {
          "default": "3.6.5",
          "description": "Overrides the image tag",
          "required": [],
          "title": "tag",
          "type": "string"
        }
      },
      "required": [
        "registry",
        "repository",
        "pullPolicy",
        "tag"
      ],
      "title": "image",
      "type": "object"
    },
    "imagePullSecrets": {
      "description": "If defined, uses a Secret to pull an image from a private Docker registry or repository.",
      "items": {
        "required": []
      },
      "required": [],
      "title": "imagePullSecrets",
      "type": "array"
    },
    "nameOverride": {
      "default": "",
      "description": "Provide a name in place of `etcd-defrag`",
      "required": [],
      "title": "nameOverride",
      "type": "string"
    },
    "nodeSelector": {
      "description": "Node labels for pod assignment",
      "properties": {
        "node-role.kubernetes.io/control-plane": {
          "default": "",
          "required": [],
          "title": "node-role.kubernetes.io/control-plane",
          "type": "string"
        }
      },
      "required": [
        "node-role.kubernetes.io/control-plane"
      ],
      "title": "nodeSelector"
    },
    "podSecurityContext": {
      "description": "pod-level security context",
      "required": [],
      "title": "podSecurityContext",
      "type": "object"
    },
    "resources": {
      "description": "Resource limits and requests for the controller pods.",
      "required": [],
      "title": "resources",
      "type": "object"
    },
    "securityContext": {
      "description": "container-level security context",
      "required": [],
      "title": "securityContext",
      "type": "object"
    },
    "serviceAccount": {
      "properties": {
        "annotations": {
          "description": "Annotations to add to the service account",
          "required": [],
          "title": "annotations",
          "type": "object"
        },
        "create": {
          "default": true,
          "description": "Specifies whether a service account should be created",
          "required": [],
          "title": "create",
          "type": "boolean"
        },
        "name": {
          "default": "",
          "description": "The name of the service account to use.\nIf not set and create is true, a name is generated using the fullname template",
          "required": [],
          "title": "name",
          "type": "string"
        }
      },
      "required": [
        "create",
        "annotations",
        "name"
      ],
      "title": "serviceAccount",
      "type": "object"
    },
    "tolerations": {
      "description": "Toleration labels for pod assignment",
      "items": {
        "required": []
      },
      "required": [],
      "title": "tolerations",
      "type": "array"
    }
  },
  "required": [
    "nameOverride",
    "fullnameOverride",
    "image",
    "imagePullSecrets",
    "podSecurityContext",
    "resources",
    "securityContext",
    "serviceAccount",
    "tolerations",
    "affinity",
    "extraEnv",
    "hostNetwork",
    "defrag"
  ],
  "type": "object"
}
