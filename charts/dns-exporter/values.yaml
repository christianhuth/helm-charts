# -- Provide a name in place of `netcupscp-exporter`
nameOverride: ""
# -- String to fully override `"netcupscp-exporter.fullname"`
fullnameOverride: ""

image:
  # -- image registry
  registry: docker.io
  # -- image repository
  repository: tykling/dns_exporter
  # -- image pull policy
  pullPolicy: Always
  # -- Overrides the image tag
  tag: "v1.1.0"

# -- If defined, uses a Secret to pull an image from a private Docker registry or repository.
imagePullSecrets: []

# -- Number of replicas
replicaCount: 1

# -- The number of old ReplicaSets to retain
revisionHistoryLimit: 0

serviceAccount:
  # -- Specifies whether a service account should be created
  create: true
  # -- Annotations to add to the service account
  annotations: {}
  # -- The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# -- Annotations to be added to pods
podAnnotations: {}

# -- pod-level security context
podSecurityContext: {}
  # fsGroup: 2000

# -- container-level security context
securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  # -- Kubernetes service type
  type: ClusterIP
  # -- Kubernetes port where service is exposed
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# -- Resource limits and requests for the headwind pods.
resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# -- Node labels for pod assignment
nodeSelector: {}

# -- Toleration labels for pod assignment
tolerations: []

# -- Affinity settings for pod assignment
affinity: {}

# -- Additional environment variables that will be added to the deployment
extraEnv: []

# -- Define modules that can be used inside your targets
modulesConfig: {}
  # google_udp:
  #   family: ipv4
  #   protocol: udp
  #   server: dns.google
  #   query_type: NS

serviceMonitor:
  # -- Enable a prometheus ServiceMonitor
  enabled: false
  selfMonitor:
    # -- Enable a prometheus ServiceMonitor to monitor the DNS Exporter
    enabled: true
    # -- Prometheus ServiceMonitor labels
    additionalLabels: {}
      # release: prometheus
    # -- Prometheus ServiceMonitor selector
    selector: {}
      # prometheus: kube-prometheus
    # -- Prometheus ServiceMonitor interval
    interval: 30s
    # -- Prometheus ServiceMonitor namespace
    namespace: ""
    # -- Prometheus [MetricRelabelConfigs] to apply to samples before ingestion
    metricRelabelings: []
    # -- Prometheus [RelabelConfigs] to apply to samples before scraping
    relabelings: []

  targetsMonitor:
    # -- Enable a prometheus ServiceMonitor to monitor the Targets of the DNS Exporter
    enabled: true
    # -- Prometheus ServiceMonitor labels
    additionalLabels: {}
      # release: prometheus
    # -- Prometheus ServiceMonitor selector
    selector: {}
      # prometheus: kube-prometheus
    # -- Prometheus ServiceMonitor interval
    interval: 30s
    # -- Prometheus ServiceMonitor namespace
    namespace: ""
    # -- Prometheus [MetricRelabelConfigs] to apply to samples before ingestion
    metricRelabelings: []
    # -- Prometheus [RelabelConfigs] to apply to samples before scraping
    relabelings: []
    # -- Targets that should be scraped by the DNS-Exporter
    targets: []

podMonitor:
  # -- Enable a prometheus PodMonitor CR for google managed prometheus
  enabled: false
  selfMonitor:
    # -- Enable a prometheus PodMonitor to monitor the DNS Exporter
    enabled: true
    # -- Prometheus PodMonitor labels
    additionalLabels: {}
      # release: prometheus
    # -- Prometheus PodMonitor selector
    selector: {}
      # prometheus: kube-prometheus
    # -- Prometheus PodMonitor interval
    interval: 30s
    # -- Prometheus PodMonitor namespace
    namespace: ""
    # -- Prometheus [MetricRelabelConfigs] to apply to samples before ingestion
    metricRelabelings: []

  targetsMonitor:
    # -- Enable a prometheus PodMonitor to monitor the Targets of the DNS Exporter
    enabled: true
    # -- Prometheus PodMonitor labels
    additionalLabels: {}
      # release: prometheus
    # -- Prometheus PodMonitor selector
    selector: {}
      # prometheus: kube-prometheus
    # -- Prometheus PodMonitor interval
    interval: 30s
    # -- Prometheus PodMonitor namespace
    namespace: ""
    # -- Prometheus [MetricRelabelConfigs] to apply to samples before ingestion
    metricRelabelings: []
    # -- Targets that should be scraped by the DNS-Exporter
    targets: []
