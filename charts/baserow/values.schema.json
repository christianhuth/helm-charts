{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "properties": {
    "backend": {
      "properties": {
        "asgi": {
          "properties": {
            "affinity": {
              "description": "Affinity settings for pod assignment",
              "required": [],
              "title": "affinity",
              "type": "object"
            },
            "autoscaling": {
              "properties": {
                "enabled": {
                  "default": false,
                  "description": "Enable Horizontal POD autoscaling",
                  "required": [],
                  "title": "enabled",
                  "type": "boolean"
                },
                "maxReplicas": {
                  "default": 100,
                  "description": "Maximum number of replicas",
                  "required": [],
                  "title": "maxReplicas",
                  "type": "integer"
                },
                "minReplicas": {
                  "default": 1,
                  "description": "Minimum number of replicas",
                  "required": [],
                  "title": "minReplicas",
                  "type": "integer"
                },
                "targetCPUUtilizationPercentage": {
                  "default": 80,
                  "description": "Target CPU utilization percentage",
                  "required": [],
                  "title": "targetCPUUtilizationPercentage",
                  "type": "integer"
                },
                "targetMemoryUtilizationPercentage": {
                  "default": 80,
                  "description": "Target Memory utilization percentage",
                  "required": [],
                  "title": "targetMemoryUtilizationPercentage",
                  "type": "integer"
                }
              },
              "required": [
                "enabled",
                "minReplicas",
                "maxReplicas",
                "targetCPUUtilizationPercentage",
                "targetMemoryUtilizationPercentage"
              ],
              "title": "autoscaling",
              "type": "object"
            },
            "extraEnv": {
              "description": "additional environment variables to be added to the pods",
              "items": {
                "required": []
              },
              "required": [],
              "title": "extraEnv",
              "type": "array"
            },
            "image": {
              "properties": {
                "pullPolicy": {
                  "default": "Always",
                  "description": "image pull policy",
                  "required": [],
                  "title": "pullPolicy",
                  "type": "string"
                },
                "registry": {
                  "default": "docker.io",
                  "description": "image registory",
                  "required": [],
                  "title": "registry",
                  "type": "string"
                },
                "repository": {
                  "default": "baserow/backend",
                  "description": "image repository",
                  "required": [],
                  "title": "repository",
                  "type": "string"
                },
                "tag": {
                  "default": "1.34.3",
                  "description": "Overrides the image tag",
                  "required": [],
                  "title": "tag",
                  "type": "string"
                }
              },
              "required": [
                "registry",
                "repository",
                "pullPolicy",
                "tag"
              ],
              "title": "image",
              "type": "object"
            },
            "imagePullSecrets": {
              "description": "If defined, uses a Secret to pull an image from a private Docker registry or repository.",
              "items": {
                "required": []
              },
              "required": [],
              "title": "imagePullSecrets",
              "type": "array"
            },
            "livenessProbe": {
              "properties": {
                "failureThreshold": {
                  "default": 3,
                  "description": "Failure threshold for livenessProbe",
                  "required": [],
                  "title": "failureThreshold",
                  "type": "integer"
                },
                "initialDelaySeconds": {
                  "default": 120,
                  "description": "Initial delay seconds for livenessProbe",
                  "required": [],
                  "title": "initialDelaySeconds",
                  "type": "integer"
                },
                "periodSeconds": {
                  "default": 30,
                  "description": "Period seconds for livenessProbe",
                  "required": [],
                  "title": "periodSeconds",
                  "type": "integer"
                },
                "successThreshold": {
                  "default": 1,
                  "description": "Success threshold for livenessProbe",
                  "required": [],
                  "title": "successThreshold",
                  "type": "integer"
                },
                "timeoutSeconds": {
                  "default": 5,
                  "description": "Timeout seconds for livenessProbe",
                  "required": [],
                  "title": "timeoutSeconds",
                  "type": "integer"
                }
              },
              "required": [
                "failureThreshold",
                "initialDelaySeconds",
                "periodSeconds",
                "successThreshold",
                "timeoutSeconds"
              ],
              "title": "livenessProbe",
              "type": "object"
            },
            "nodeSelector": {
              "description": "Node labels for pod assignment",
              "required": [],
              "title": "nodeSelector",
              "type": "object"
            },
            "podAnnotations": {
              "description": "Annotations to be added to the frontend pods",
              "required": [],
              "title": "podAnnotations",
              "type": "object"
            },
            "podSecurityContext": {
              "description": "pod-level security context",
              "properties": {
                "fsGroup": {
                  "default": 9999,
                  "required": [],
                  "title": "fsGroup",
                  "type": "integer"
                },
                "runAsGroup": {
                  "default": 9999,
                  "required": [],
                  "title": "runAsGroup",
                  "type": "integer"
                },
                "runAsUser": {
                  "default": 9999,
                  "required": [],
                  "title": "runAsUser",
                  "type": "integer"
                }
              },
              "required": [
                "fsGroup",
                "runAsGroup",
                "runAsUser"
              ],
              "title": "podSecurityContext",
              "type": "object"
            },
            "priorityClassName": {
              "default": "",
              "description": "Pod priority class name",
              "required": [],
              "title": "priorityClassName",
              "type": "string"
            },
            "readinessProbe": {
              "properties": {
                "failureThreshold": {
                  "default": 3,
                  "description": "Failure threshold for readinessProbe",
                  "required": [],
                  "title": "failureThreshold",
                  "type": "integer"
                },
                "initialDelaySeconds": {
                  "default": 120,
                  "description": "Initial delay seconds for readinessProbe",
                  "required": [],
                  "title": "initialDelaySeconds",
                  "type": "integer"
                },
                "periodSeconds": {
                  "default": 30,
                  "description": "Period seconds for readinessProbe",
                  "required": [],
                  "title": "periodSeconds",
                  "type": "integer"
                },
                "successThreshold": {
                  "default": 1,
                  "description": "Success threshold for readinessProbe",
                  "required": [],
                  "title": "successThreshold",
                  "type": "integer"
                },
                "timeoutSeconds": {
                  "default": 5,
                  "description": "Timeout seconds for readinessProbe",
                  "required": [],
                  "title": "timeoutSeconds",
                  "type": "integer"
                }
              },
              "required": [
                "failureThreshold",
                "initialDelaySeconds",
                "periodSeconds",
                "successThreshold",
                "timeoutSeconds"
              ],
              "title": "readinessProbe",
              "type": "object"
            },
            "replicaCount": {
              "default": 1,
              "description": "Number of replicas",
              "required": [],
              "title": "replicaCount",
              "type": "integer"
            },
            "resources": {
              "description": "Resource limits and requests for the controller pods.",
              "required": [],
              "title": "resources",
              "type": "object"
            },
            "revisionHistoryLimit": {
              "default": 10,
              "description": "The number of old ReplicaSets to retain",
              "required": [],
              "title": "revisionHistoryLimit",
              "type": "integer"
            },
            "securityContext": {
              "description": "container-level security context",
              "properties": {
                "runAsGroup": {
                  "default": 9999,
                  "required": [],
                  "title": "runAsGroup",
                  "type": "integer"
                },
                "runAsNonRoot": {
                  "default": true,
                  "required": [],
                  "title": "runAsNonRoot",
                  "type": "boolean"
                },
                "runAsUser": {
                  "default": 9999,
                  "required": [],
                  "title": "runAsUser",
                  "type": "integer"
                }
              },
              "required": [
                "runAsGroup",
                "runAsNonRoot",
                "runAsUser"
              ],
              "title": "securityContext",
              "type": "object"
            },
            "selectorLabels": {
              "description": "Additional labels to add to the pod",
              "required": [],
              "title": "selectorLabels",
              "type": "object"
            },
            "service": {
              "properties": {
                "port": {
                  "default": 8000,
                  "description": "Kubernetes port where service is exposed",
                  "required": [],
                  "title": "port",
                  "type": "integer"
                },
                "type": {
                  "default": "ClusterIP",
                  "description": "Kubernetes service type",
                  "required": [],
                  "title": "type",
                  "type": "string"
                }
              },
              "required": [
                "type",
                "port"
              ],
              "title": "service",
              "type": "object"
            },
            "serviceAccount": {
              "properties": {
                "annotations": {
                  "description": "Annotations to add to the service account",
                  "required": [],
                  "title": "annotations",
                  "type": "object"
                },
                "create": {
                  "default": true,
                  "description": "Specifies whether a service account should be created",
                  "required": [],
                  "title": "create",
                  "type": "boolean"
                },
                "name": {
                  "default": "",
                  "description": "The name of the service account to use.\nIf not set and create is true, a name is generated using the fullname template",
                  "required": [],
                  "title": "name",
                  "type": "string"
                }
              },
              "required": [
                "create",
                "annotations",
                "name"
              ],
              "title": "serviceAccount",
              "type": "object"
            },
            "tolerations": {
              "description": "Toleration labels for pod assignment",
              "items": {
                "required": []
              },
              "required": [],
              "title": "tolerations",
              "type": "array"
            }
          },
          "required": [
            "image",
            "imagePullSecrets",
            "podAnnotations",
            "podSecurityContext",
            "priorityClassName",
            "replicaCount",
            "revisionHistoryLimit",
            "resources",
            "securityContext",
            "serviceAccount",
            "service",
            "autoscaling",
            "livenessProbe",
            "readinessProbe",
            "nodeSelector",
            "tolerations",
            "affinity",
            "selectorLabels",
            "extraEnv"
          ],
          "title": "asgi",
          "type": "object"
        },
        "celery": {
          "properties": {
            "affinity": {
              "description": "Affinity settings for pod assignment",
              "required": [],
              "title": "affinity",
              "type": "object"
            },
            "autoscaling": {
              "properties": {
                "enabled": {
                  "default": false,
                  "description": "Enable Horizontal POD autoscaling",
                  "required": [],
                  "title": "enabled",
                  "type": "boolean"
                },
                "maxReplicas": {
                  "default": 100,
                  "description": "Maximum number of replicas",
                  "required": [],
                  "title": "maxReplicas",
                  "type": "integer"
                },
                "minReplicas": {
                  "default": 1,
                  "description": "Minimum number of replicas",
                  "required": [],
                  "title": "minReplicas",
                  "type": "integer"
                },
                "targetCPUUtilizationPercentage": {
                  "default": 80,
                  "description": "Target CPU utilization percentage",
                  "required": [],
                  "title": "targetCPUUtilizationPercentage",
                  "type": "integer"
                },
                "targetMemoryUtilizationPercentage": {
                  "default": 80,
                  "description": "Target Memory utilization percentage",
                  "required": [],
                  "title": "targetMemoryUtilizationPercentage",
                  "type": "integer"
                }
              },
              "required": [
                "enabled",
                "minReplicas",
                "maxReplicas",
                "targetCPUUtilizationPercentage",
                "targetMemoryUtilizationPercentage"
              ],
              "title": "autoscaling",
              "type": "object"
            },
            "extraEnv": {
              "description": "additional environment variables to be added to the pods",
              "items": {
                "required": []
              },
              "required": [],
              "title": "extraEnv",
              "type": "array"
            },
            "image": {
              "properties": {
                "pullPolicy": {
                  "default": "Always",
                  "description": "image pull policy",
                  "required": [],
                  "title": "pullPolicy",
                  "type": "string"
                },
                "registry": {
                  "default": "docker.io",
                  "description": "image registory",
                  "required": [],
                  "title": "registry",
                  "type": "string"
                },
                "repository": {
                  "default": "baserow/backend",
                  "description": "image repository",
                  "required": [],
                  "title": "repository",
                  "type": "string"
                },
                "tag": {
                  "default": "1.34.3",
                  "description": "Overrides the image tag",
                  "required": [],
                  "title": "tag",
                  "type": "string"
                }
              },
              "required": [
                "registry",
                "repository",
                "pullPolicy",
                "tag"
              ],
              "title": "image",
              "type": "object"
            },
            "imagePullSecrets": {
              "description": "If defined, uses a Secret to pull an image from a private Docker registry or repository.",
              "items": {
                "required": []
              },
              "required": [],
              "title": "imagePullSecrets",
              "type": "array"
            },
            "livenessProbe": {
              "properties": {
                "initialDelaySeconds": {
                  "default": 10,
                  "description": "Initial delay seconds for livenessProbe",
                  "required": [],
                  "title": "initialDelaySeconds",
                  "type": "integer"
                },
                "periodSeconds": {
                  "default": 10,
                  "description": "Period seconds for livenessProbe",
                  "required": [],
                  "title": "periodSeconds",
                  "type": "integer"
                },
                "timeoutSeconds": {
                  "default": 10,
                  "description": "Timeout seconds for livenessProbe",
                  "required": [],
                  "title": "timeoutSeconds",
                  "type": "integer"
                }
              },
              "required": [
                "initialDelaySeconds",
                "periodSeconds",
                "timeoutSeconds"
              ],
              "title": "livenessProbe",
              "type": "object"
            },
            "nodeSelector": {
              "description": "Node labels for pod assignment",
              "required": [],
              "title": "nodeSelector",
              "type": "object"
            },
            "podAnnotations": {
              "description": "Annotations to be added to the frontend pods",
              "required": [],
              "title": "podAnnotations",
              "type": "object"
            },
            "podSecurityContext": {
              "description": "pod-level security context",
              "properties": {
                "fsGroup": {
                  "default": 9999,
                  "required": [],
                  "title": "fsGroup",
                  "type": "integer"
                },
                "runAsGroup": {
                  "default": 9999,
                  "required": [],
                  "title": "runAsGroup",
                  "type": "integer"
                },
                "runAsUser": {
                  "default": 9999,
                  "required": [],
                  "title": "runAsUser",
                  "type": "integer"
                }
              },
              "required": [
                "fsGroup",
                "runAsGroup",
                "runAsUser"
              ],
              "title": "podSecurityContext",
              "type": "object"
            },
            "priorityClassName": {
              "default": "",
              "description": "Pod priority class name",
              "required": [],
              "title": "priorityClassName",
              "type": "string"
            },
            "readinessProbe": {
              "properties": {
                "initialDelaySeconds": {
                  "default": 10,
                  "description": "Initial delay seconds for readinessProbe",
                  "required": [],
                  "title": "initialDelaySeconds",
                  "type": "integer"
                },
                "periodSeconds": {
                  "default": 10,
                  "description": "Period seconds for readinessProbe",
                  "required": [],
                  "title": "periodSeconds",
                  "type": "integer"
                },
                "timeoutSeconds": {
                  "default": 10,
                  "description": "Timeout seconds for readinessProbe",
                  "required": [],
                  "title": "timeoutSeconds",
                  "type": "integer"
                }
              },
              "required": [
                "initialDelaySeconds",
                "periodSeconds",
                "timeoutSeconds"
              ],
              "title": "readinessProbe",
              "type": "object"
            },
            "replicaCount": {
              "default": 1,
              "description": "Number of replicas",
              "required": [],
              "title": "replicaCount",
              "type": "integer"
            },
            "resources": {
              "description": "Resource limits and requests for the controller pods.",
              "required": [],
              "title": "resources",
              "type": "object"
            },
            "revisionHistoryLimit": {
              "default": 10,
              "description": "The number of old ReplicaSets to retain",
              "required": [],
              "title": "revisionHistoryLimit",
              "type": "integer"
            },
            "securityContext": {
              "description": "container-level security context",
              "properties": {
                "runAsGroup": {
                  "default": 9999,
                  "required": [],
                  "title": "runAsGroup",
                  "type": "integer"
                },
                "runAsNonRoot": {
                  "default": true,
                  "required": [],
                  "title": "runAsNonRoot",
                  "type": "boolean"
                },
                "runAsUser": {
                  "default": 9999,
                  "required": [],
                  "title": "runAsUser",
                  "type": "integer"
                }
              },
              "required": [
                "runAsGroup",
                "runAsNonRoot",
                "runAsUser"
              ],
              "title": "securityContext",
              "type": "object"
            },
            "selectorLabels": {
              "description": "Additional labels to add to the pod",
              "required": [],
              "title": "selectorLabels",
              "type": "object"
            },
            "serviceAccount": {
              "properties": {
                "annotations": {
                  "description": "Annotations to add to the service account",
                  "required": [],
                  "title": "annotations",
                  "type": "object"
                },
                "create": {
                  "default": true,
                  "description": "Specifies whether a service account should be created",
                  "required": [],
                  "title": "create",
                  "type": "boolean"
                },
                "name": {
                  "default": "",
                  "description": "The name of the service account to use.\nIf not set and create is true, a name is generated using the fullname template",
                  "required": [],
                  "title": "name",
                  "type": "string"
                }
              },
              "required": [
                "create",
                "annotations",
                "name"
              ],
              "title": "serviceAccount",
              "type": "object"
            },
            "tolerations": {
              "description": "Toleration labels for pod assignment",
              "items": {
                "required": []
              },
              "required": [],
              "title": "tolerations",
              "type": "array"
            }
          },
          "required": [
            "image",
            "imagePullSecrets",
            "podAnnotations",
            "podSecurityContext",
            "priorityClassName",
            "replicaCount",
            "revisionHistoryLimit",
            "resources",
            "securityContext",
            "serviceAccount",
            "autoscaling",
            "livenessProbe",
            "readinessProbe",
            "nodeSelector",
            "tolerations",
            "affinity",
            "selectorLabels",
            "extraEnv"
          ],
          "title": "celery",
          "type": "object"
        },
        "config": {
          "description": "configuration for the backend",
          "properties": {
            "additionalApps": {
              "default": "",
              "description": "A comma separated list of additional django applications to add to the INSTALLED_APPS django setting",
              "required": [],
              "title": "additionalApps",
              "type": "string"
            },
            "airtableImportSoftTimeLimit": {
              "default": "1800",
              "description": "The maximum amount of seconds an Airtable migration import job can run.",
              "required": [],
              "title": "airtableImportSoftTimeLimit",
              "type": "string"
            },
            "amountOfGunicornWorkers": {
              "default": "",
              "description": "The number of concurrent worker processes used by the Baserow backend gunicorn server to process incoming requests",
              "required": [],
              "title": "amountOfGunicornWorkers",
              "type": "string"
            },
            "aws": {
              "properties": {
                "accessKeyId": {
                  "default": "",
                  "description": "The access key for your AWS account. When set to anything other than empty will switch Baserow to use a S3 compatible bucket for storing user file uploads.",
                  "required": [],
                  "title": "accessKeyId",
                  "type": "string"
                },
                "bucketName": {
                  "default": "",
                  "description": "Your Amazon Web Services storage bucket name.",
                  "required": [],
                  "title": "bucketName",
                  "type": "string"
                },
                "existingSecret": {
                  "default": "",
                  "description": "Name of existing secret to use for AWS credentials like backend.config.aws.accessKeyId and backend.config.aws.secretAccessKey. Keys in secret should be called `access-key-id` and `secret-access-key`.",
                  "required": [],
                  "title": "existingSecret",
                  "type": "string"
                },
                "s3CustomDomain": {
                  "default": "",
                  "description": "Your custom domain where the files can be downloaded from.",
                  "required": [],
                  "title": "s3CustomDomain",
                  "type": "string"
                },
                "s3EndpointUrl": {
                  "default": "",
                  "description": "Custom S3 URL to use when connecting to S3, including scheme.",
                  "required": [],
                  "title": "s3EndpointUrl",
                  "type": "string"
                },
                "s3RegionName": {
                  "default": "",
                  "description": "Name of the AWS S3 region to use (eg. eu-west-1)",
                  "required": [],
                  "title": "s3RegionName",
                  "type": "string"
                },
                "secretAccessKey": {
                  "default": "",
                  "description": "The access secret key for your AWS account.",
                  "required": [],
                  "title": "secretAccessKey",
                  "type": "string"
                }
              },
              "required": [
                "accessKeyId",
                "bucketName",
                "existingSecret",
                "secretAccessKey",
                "s3CustomDomain",
                "s3EndpointUrl",
                "s3RegionName"
              ],
              "title": "aws",
              "type": "object"
            },
            "batchRowsSizeLimit": {
              "default": "200",
              "description": "Controls how many rows can be created, deleted or updated at once using the batch endpoints.",
              "required": [],
              "title": "batchRowsSizeLimit",
              "type": "string"
            },
            "celery": {
              "properties": {
                "amountOfWorkers": {
                  "default": "",
                  "description": "The number of concurrent celery worker processes used to process asynchronous tasks. If not set will default to the number of available cores. Each celery process uses memory, to reduce Baserow’s memory footprint consider setting and reducing this variable.",
                  "required": [],
                  "title": "amountOfWorkers",
                  "type": "string"
                },
                "beatDebugLevel": {
                  "default": "INFO",
                  "description": "The logging level for the celery beat service.",
                  "required": [],
                  "title": "beatDebugLevel",
                  "type": "string"
                },
                "beatStartupDelay": {
                  "default": "15",
                  "description": "The number of seconds the celery beat worker sleeps before starting up.",
                  "required": [],
                  "title": "beatStartupDelay",
                  "type": "string"
                },
                "runMinimal": {
                  "default": "",
                  "description": "When BASEROW_AMOUNT_OF_WORKERS is 1 and this is set to a non empty value Baserow will not run the export-worker but instead run both the celery export and normal tasks on the normal celery worker. Set this to lower the memory usage of Baserow in expense of performance.",
                  "required": [],
                  "title": "runMinimal",
                  "type": "string"
                }
              },
              "required": [
                "amountOfWorkers",
                "beatDebugLevel",
                "beatStartupDelay",
                "runMinimal"
              ],
              "title": "celery",
              "type": "object"
            },
            "disableAnonymousPublicViewWsConnections": {
              "default": "",
              "description": "When sharing views publicly a websocket connection is opened to provide realtime updates to viewers of the public link. To disable this set any non empty value. When disabled publicly shared links will need to be refreshed to see any updates to the view.",
              "required": [],
              "title": "disableAnonymousPublicViewWsConnections",
              "type": "string"
            },
            "disableModelCache": {
              "default": "",
              "description": "When set to any non empty value the model cache used to speed up Baserow will be disabled. Useful to enable when debugging Baserow errors if they are possibly caused by the model cache itself.",
              "required": [],
              "title": "disableModelCache",
              "type": "string"
            },
            "dontUpdateFormulasAfterMigration": {
              "default": "",
              "description": "Baserow’s formulas have an internal version number. When upgrading Baserow if the formula language has also changed then after the database migration has run Baserow will also automatically recalculate all formulas if they have a different version. Set this to any non empty value to disable this automatic update if you would prefer to run the update_formulas management command manually yourself. Formulas might break if you forget to do so after an upgrade of Baserow until and so it is recommended to leave this empty.",
              "required": [],
              "title": "dontUpdateFormulasAfterMigration",
              "type": "string"
            },
            "email": {
              "properties": {
                "existingSecret": {
                  "default": "",
                  "description": "Name of existing secret to use for the email password. Key in secret should be called `email-password`.",
                  "required": [],
                  "title": "existingSecret",
                  "type": "string"
                },
                "fromEmail": {
                  "default": "",
                  "description": "The email address Baserow will send emails from.",
                  "required": [],
                  "title": "fromEmail",
                  "type": "string"
                },
                "smtp": {
                  "default": "",
                  "description": "If set to any non empty value then Baserow will start sending emails using the configuration options below. If not set then Baserow will not send emails and just log them to the Celery worker logs instead.",
                  "required": [],
                  "title": "smtp",
                  "type": "string"
                },
                "smtpHost": {
                  "default": "",
                  "description": "The host of the external SMTP server that Baserow should use to send emails.",
                  "required": [],
                  "title": "smtpHost",
                  "type": "string"
                },
                "smtpPassword": {
                  "default": "",
                  "description": "The password to authenticate to the smtp host when sending emails.",
                  "required": [],
                  "title": "smtpPassword",
                  "type": "string"
                },
                "smtpPort": {
                  "default": "",
                  "description": "The port used to connect to the smtp host.",
                  "required": [],
                  "title": "smtpPort",
                  "type": "string"
                },
                "smtpUseTls": {
                  "default": "",
                  "description": "If set to any non empty value then Baserow will attempt to send emails using TLS.",
                  "required": [],
                  "title": "smtpUseTls",
                  "type": "string"
                },
                "smtpUser": {
                  "default": "",
                  "description": "The username to authenticate to the smtp host when sending emails.",
                  "required": [],
                  "title": "smtpUser",
                  "type": "string"
                }
              },
              "required": [
                "existingSecret",
                "fromEmail",
                "smtp",
                "smtpHost",
                "smtpPassword",
                "smtpPort",
                "smtpUser",
                "smtpUseTls"
              ],
              "title": "email",
              "type": "object"
            },
            "enableSecureProxySslHeader": {
              "default": "",
              "description": "Set to any non-empty value to ensure Baserow generates https:// next links provided by paginated API endpoints. Baserow will still work correctly if not enabled, this is purely for giving the correct https url for clients of the API.",
              "required": [],
              "title": "enableSecureProxySslHeader",
              "type": "string"
            },
            "existingSecret": {
              "default": "",
              "description": "Name of existing secret to use for secret configuration values like backend.config.jwtSigningKey and backend.config.secretKey. Keys in secret should be called `jwt-signing-key` and `secret-key`.",
              "required": [],
              "title": "existingSecret",
              "type": "string"
            },
            "fileUploadSizeLimit": {
              "default": "1048576",
              "description": "The max file size in MB allowed to be uploaded by users into a Baserow File Field.",
              "required": [],
              "title": "fileUploadSizeLimit",
              "type": "string"
            },
            "hoursUntilTrashPermanentlyDeleted": {
              "default": "",
              "description": "Items from the trash will be permanently deleted after this number of hours.",
              "required": [],
              "title": "hoursUntilTrashPermanentlyDeleted",
              "type": "string"
            },
            "initialCreateSyncTableDataLimit": {
              "default": "5000",
              "description": "The maximum number of rows you can import in a synchronous way",
              "required": [],
              "title": "initialCreateSyncTableDataLimit",
              "type": "string"
            },
            "initialTableDataLimit": {
              "default": "",
              "description": "The amount of rows that can be imported when creating a table. Defaults to empty which means unlimited rows.",
              "required": [],
              "title": "initialTableDataLimit",
              "type": "string"
            },
            "jobs": {
              "properties": {
                "cleanupIntervalMinutes": {
                  "default": "5",
                  "description": "How often the job cleanup task will run.",
                  "required": [],
                  "title": "cleanupIntervalMinutes",
                  "type": "string"
                },
                "expirationTimeLimit": {
                  "default": "43200",
                  "description": "How long before a Baserow job will be kept before being cleaned up.",
                  "required": [],
                  "title": "expirationTimeLimit",
                  "type": "string"
                },
                "softTimeLimit": {
                  "default": "1800",
                  "description": "The number of seconds a Baserow job can run before being terminated.",
                  "required": [],
                  "title": "softTimeLimit",
                  "type": "string"
                }
              },
              "required": [
                "cleanupIntervalMinutes",
                "expirationTimeLimit",
                "softTimeLimit"
              ],
              "title": "jobs",
              "type": "object"
            },
            "jwtSigningKey": {
              "default": "",
              "description": "The signing key that is used to sign the content of generated tokens. For HMAC signing, this should be a random string with at least as many bits of data as is required by the signing protocol. See https://django-rest-framework-simplejwt.readthedocs.io/en/latest/settings.html#signing-key for more details.",
              "required": [],
              "title": "jwtSigningKey",
              "type": "string"
            },
            "logging": {
              "properties": {
                "backendDebug": {
                  "default": "off",
                  "description": "If set to “on” then will enable the non production safe debug mode for the Baserow django backend.",
                  "required": [],
                  "title": "backendDebug",
                  "type": "string"
                },
                "backendLogLevel": {
                  "default": "INFO",
                  "description": "The default log level used by the backend, supports ERROR, WARNING, INFO, DEBUG, TRACE",
                  "required": [],
                  "title": "backendLogLevel",
                  "type": "string"
                },
                "databaseLogLevel": {
                  "default": "ERROR",
                  "description": "The default log level used for database related logs in the backend. Supports the same values as the normal log level. If you also enable BASEROW_BACKEND_DEBUG and set this to DEBUG you will be able to see all SQL queries in the backend logs.",
                  "required": [],
                  "title": "databaseLogLevel",
                  "type": "string"
                }
              },
              "required": [
                "backendDebug",
                "backendLogLevel",
                "databaseLogLevel"
              ],
              "title": "logging",
              "type": "object"
            },
            "maxFileImportErrorCount": {
              "default": "30",
              "description": "The max number of per row errors than can occur in a file import before an overall failure is declared.",
              "required": [],
              "title": "maxFileImportErrorCount",
              "type": "string"
            },
            "maxRowReportErrorCount": {
              "default": "30",
              "description": "The maximum row error count tolerated before a file import fails. Before this max error count the import will continue and the non failing rows will be imported and after it, no rows are imported at all.",
              "required": [],
              "title": "maxRowReportErrorCount",
              "type": "string"
            },
            "media": {
              "properties": {
                "root": {
                  "default": "/baserow/media",
                  "description": "The folder in which the backend will store user uploaded files",
                  "required": [],
                  "title": "root",
                  "type": "string"
                },
                "url": {
                  "default": "$PUBLIC_BACKEND_URL/media/",
                  "description": "The URL at which user uploaded media files will be made available",
                  "required": [],
                  "title": "url",
                  "type": "string"
                }
              },
              "required": [
                "root",
                "url"
              ],
              "title": "media",
              "type": "object"
            },
            "migrateOnStartup": {
              "default": "true",
              "description": "If set to “true” when the Baserow backend service starts up it will automatically apply database migrations. Set to any other value to disable. If you disable this then you must remember to manually apply the database migrations when upgrading Baserow to a new version.",
              "required": [],
              "title": "migrateOnStartup",
              "type": "string"
            },
            "minutesUntilActionCleanedUp": {
              "default": "120",
              "description": "How long before actions are cleaned up, actions are used to let you undo/redo so this is effectively the max length of time you can undo/redo can action.",
              "required": [],
              "title": "minutesUntilActionCleanedUp",
              "type": "string"
            },
            "postgresStartupCheckAttempts": {
              "default": "5",
              "description": "When Baserow’s Backend service starts up it first checks to see if the postgres database is available.",
              "required": [],
              "title": "postgresStartupCheckAttempts",
              "type": "string"
            },
            "rowPageSizeLimit": {
              "default": "200",
              "description": "The maximum number of rows that can be requested at once.",
              "required": [],
              "title": "rowPageSizeLimit",
              "type": "string"
            },
            "secretKey": {
              "default": "",
              "description": "The Secret key used by Django for cryptographic signing such as generating secure password reset links and managing sessions. See https://docs.djangoproject.com/en/3.2/ref/settings/#std:setting-SECRET_KEY for more details.",
              "required": [],
              "title": "secretKey",
              "type": "string"
            },
            "snapshotExpirationTimeDays": {
              "default": "360",
              "description": "Controls when snapshots expire, set in number of days. Expired snapshots will be automatically deleted.",
              "required": [],
              "title": "snapshotExpirationTimeDays",
              "type": "string"
            },
            "syncTemplatesTimeLimit": {
              "default": "1800",
              "description": "The number of seconds before the background sync templates job will timeout if not yet completed.",
              "required": [],
              "title": "syncTemplatesTimeLimit",
              "type": "string"
            },
            "tokens": {
              "properties": {
                "accessTokenLifetimeMinutes": {
                  "default": "10",
                  "description": "The number of minutes which specifies how long access tokens are valid. This will be converted in a timedelta value and added to the current UTC time during token generation to obtain the token’s default “exp” claim value.",
                  "required": [],
                  "title": "accessTokenLifetimeMinutes",
                  "type": "string"
                },
                "refreshTokenLifetimeHours": {
                  "default": "168",
                  "description": "The number of hours which specifies how long refresh tokens are valid. This will be converted in a timedelta value and added to the current UTC time during token generation to obtain the token’s default “exp” claim value.",
                  "required": [],
                  "title": "refreshTokenLifetimeHours",
                  "type": "string"
                }
              },
              "required": [
                "accessTokenLifetimeMinutes",
                "refreshTokenLifetimeHours"
              ],
              "title": "tokens",
              "type": "object"
            },
            "triggerSyncTemplatesAfterMigration": {
              "default": "true",
              "description": "If set to “true” when after a migration Baserow will automatically sync all builtin Baserow templates in the background. If you are using a postgres database which is constrained to fewer than 10000 rows then we recommend you disable this as the Baserow templates will go over that row limit. To disable this set to any other value than “true”",
              "required": [],
              "title": "triggerSyncTemplatesAfterMigration",
              "type": "string"
            },
            "waitInsteadOf409ConflictError": {
              "default": "",
              "description": "When updating or creating various resources in Baserow if another concurrent operation is ongoing (like a snapshot, duplication, import etc) which would be affected by your modification a 409 HTTP error will be returned. If you instead would prefer Baserow to not return a 409 and just block waiting until the operation finishes and then to perform the requested operation set this flag to any non-empty value.",
              "required": [],
              "title": "waitInsteadOf409ConflictError",
              "type": "string"
            },
            "webhook": {
              "properties": {
                "allowPrivateAddress": {
                  "default": "",
                  "description": "If set to any non empty value allows webhooks to access all addresses. Enabling this flag is a security risk as it will allow users to send webhook requests to internal addresses on your network. Instead consider using the three variables below first to allow access to only some internal network hostnames or IPs.",
                  "required": [],
                  "title": "allowPrivateAddress",
                  "type": "string"
                },
                "ipBlacklist": {
                  "default": "",
                  "description": "Disabled if backend.config.webhook.allowPrivateAddress is set. List of comma seperated IP addresses or ranges that webhooks will be denied from using after the URL has been resolved to an IP using DNS.",
                  "required": [],
                  "title": "ipBlacklist",
                  "type": "string"
                },
                "ipWhitelist": {
                  "default": "",
                  "description": "Disabled if backend.config.webhook.allowPrivateAddress is set. List of comma seperated IP addresses or ranges that webhooks will be allowed to use after the webhook URL has been resolved to an IP using DNS.",
                  "required": [],
                  "title": "ipWhitelist",
                  "type": "string"
                },
                "maxCallLogEntries": {
                  "default": "10",
                  "description": "The maximum number of call log entries stored per webhook.",
                  "required": [],
                  "title": "maxCallLogEntries",
                  "type": "string"
                },
                "maxConsecutiveTriggerFailures": {
                  "default": "8",
                  "description": "The number of consecutive trigger failures that can occur before a webhook is disabled.",
                  "required": [],
                  "title": "maxConsecutiveTriggerFailures",
                  "type": "string"
                },
                "maxPerTable": {
                  "default": "20",
                  "description": "The max number of webhooks per Baserow table.",
                  "required": [],
                  "title": "maxPerTable",
                  "type": "string"
                },
                "maxRetriesPerCall": {
                  "default": "8",
                  "description": "The max number of retries per webhook call.",
                  "required": [],
                  "title": "maxRetriesPerCall",
                  "type": "string"
                },
                "requestTimeoutSeconds": {
                  "default": "5",
                  "description": "How long to wait on making the webhook request before timing out.",
                  "required": [],
                  "title": "requestTimeoutSeconds",
                  "type": "string"
                },
                "urlCheckTimeoutSecs": {
                  "default": "10",
                  "description": "Disabled if backend.config.webhook.allowPrivateAddress is set. How long to wait before timing out and returning an error when checking if an url can be accessed for a webhook.",
                  "required": [],
                  "title": "urlCheckTimeoutSecs",
                  "type": "string"
                },
                "urlRegexBlacklist": {
                  "default": "",
                  "description": "Disabled if backend.config.webhook.allowPrivateAddress is set. List of comma seperated regexes used to validate user configured webhook URLs, will show the user an error if any regexes match their webhook URL and prevent it from running.",
                  "required": [],
                  "title": "urlRegexBlacklist",
                  "type": "string"
                }
              },
              "required": [
                "allowPrivateAddress",
                "ipBlacklist",
                "ipWhitelist",
                "maxCallLogEntries",
                "maxConsecutiveTriggerFailures",
                "maxPerTable",
                "maxRetriesPerCall",
                "requestTimeoutSeconds",
                "urlCheckTimeoutSecs",
                "urlRegexBlacklist"
              ],
              "title": "webhook",
              "type": "object"
            }
          },
          "required": [
            "additionalApps",
            "airtableImportSoftTimeLimit",
            "amountOfGunicornWorkers",
            "aws",
            "batchRowsSizeLimit",
            "celery",
            "disableAnonymousPublicViewWsConnections",
            "disableModelCache",
            "dontUpdateFormulasAfterMigration",
            "email",
            "enableSecureProxySslHeader",
            "existingSecret",
            "fileUploadSizeLimit",
            "hoursUntilTrashPermanentlyDeleted",
            "initialCreateSyncTableDataLimit",
            "initialTableDataLimit",
            "jobs",
            "jwtSigningKey",
            "logging",
            "maxFileImportErrorCount",
            "maxRowReportErrorCount",
            "media",
            "migrateOnStartup",
            "minutesUntilActionCleanedUp",
            "postgresStartupCheckAttempts",
            "rowPageSizeLimit",
            "secretKey",
            "snapshotExpirationTimeDays",
            "syncTemplatesTimeLimit",
            "tokens",
            "triggerSyncTemplatesAfterMigration",
            "waitInsteadOf409ConflictError",
            "webhook"
          ],
          "title": "config",
          "type": "object"
        },
        "ingress": {
          "properties": {
            "annotations": {
              "description": "Additional annotations for the Ingress resource",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "className": {
              "default": "",
              "description": "IngressClass that will be be used to implement the Ingress",
              "required": [],
              "title": "className",
              "type": "string"
            },
            "enabled": {
              "default": false,
              "description": "Enable ingress record generation for the backend",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "hostname": {
              "default": "",
              "description": "cert-manager.io/cluster-issuer: cluster-issuer-name\nkubernetes.io/ingress.class: nginx\nkubernetes.io/tls-acme: \"true\"\nThe publicly reachable hostname for the backend",
              "required": [],
              "title": "hostname",
              "type": "string"
            },
            "paths": {
              "properties": {
                "asgiPath": {
                  "default": "/ws/",
                  "description": "The path under witch the asgi backend should be reached",
                  "required": [],
                  "title": "asgiPath",
                  "type": "string"
                },
                "wsgiPath": {
                  "default": "/",
                  "description": "The path under witch the wsgi backend should be reached",
                  "required": [],
                  "title": "wsgiPath",
                  "type": "string"
                }
              },
              "required": [
                "asgiPath",
                "wsgiPath"
              ],
              "title": "paths",
              "type": "object"
            },
            "tls": {
              "description": "An array with the tls configuration",
              "items": {
                "required": []
              },
              "required": [],
              "title": "tls",
              "type": "array"
            }
          },
          "required": [
            "enabled",
            "className",
            "annotations",
            "hostname",
            "paths",
            "tls"
          ],
          "title": "ingress",
          "type": "object"
        },
        "persistence": {
          "properties": {
            "accessModes": {
              "description": "the desired access modes the volume should have.",
              "items": {
                "anyOf": [
                  {
                    "required": [],
                    "type": "string"
                  }
                ],
                "required": []
              },
              "required": [],
              "title": "accessModes",
              "type": "array"
            },
            "annotations": {
              "description": "Annotations to be added to the PersistentVolumeClaim",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "enabled": {
              "default": false,
              "description": "use a PVC to persist file uploads",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "existingClaim": {
              "default": "",
              "description": "provide an existing PersistentVolumeClaim",
              "required": [],
              "title": "existingClaim",
              "type": "string"
            },
            "resources": {
              "description": "represents the minimum and maximum resources the volume should have.",
              "required": [],
              "title": "resources",
              "type": "object"
            },
            "storageClassName": {
              "default": "",
              "description": "Name of the StorageClass required by the claim.",
              "required": [],
              "title": "storageClassName",
              "type": "string"
            }
          },
          "required": [
            "enabled",
            "accessModes",
            "annotations",
            "existingClaim",
            "storageClassName",
            "resources"
          ],
          "title": "persistence",
          "type": "object"
        },
        "wsgi": {
          "properties": {
            "affinity": {
              "description": "Affinity settings for pod assignment",
              "required": [],
              "title": "affinity",
              "type": "object"
            },
            "autoscaling": {
              "properties": {
                "enabled": {
                  "default": false,
                  "description": "Enable Horizontal POD autoscaling",
                  "required": [],
                  "title": "enabled",
                  "type": "boolean"
                },
                "maxReplicas": {
                  "default": 100,
                  "description": "Maximum number of replicas",
                  "required": [],
                  "title": "maxReplicas",
                  "type": "integer"
                },
                "minReplicas": {
                  "default": 1,
                  "description": "Minimum number of replicas",
                  "required": [],
                  "title": "minReplicas",
                  "type": "integer"
                },
                "targetCPUUtilizationPercentage": {
                  "default": 80,
                  "description": "Target CPU utilization percentage",
                  "required": [],
                  "title": "targetCPUUtilizationPercentage",
                  "type": "integer"
                },
                "targetMemoryUtilizationPercentage": {
                  "default": 80,
                  "description": "Target Memory utilization percentage",
                  "required": [],
                  "title": "targetMemoryUtilizationPercentage",
                  "type": "integer"
                }
              },
              "required": [
                "enabled",
                "minReplicas",
                "maxReplicas",
                "targetCPUUtilizationPercentage",
                "targetMemoryUtilizationPercentage"
              ],
              "title": "autoscaling",
              "type": "object"
            },
            "extraEnv": {
              "description": "additional environment variables to be added to the pods",
              "items": {
                "required": []
              },
              "required": [],
              "title": "extraEnv",
              "type": "array"
            },
            "image": {
              "properties": {
                "pullPolicy": {
                  "default": "Always",
                  "description": "image pull policy",
                  "required": [],
                  "title": "pullPolicy",
                  "type": "string"
                },
                "registry": {
                  "default": "docker.io",
                  "description": "image registory",
                  "required": [],
                  "title": "registry",
                  "type": "string"
                },
                "repository": {
                  "default": "baserow/backend",
                  "description": "image repository",
                  "required": [],
                  "title": "repository",
                  "type": "string"
                },
                "tag": {
                  "default": "1.34.3",
                  "description": "Overrides the image tag",
                  "required": [],
                  "title": "tag",
                  "type": "string"
                }
              },
              "required": [
                "registry",
                "repository",
                "pullPolicy",
                "tag"
              ],
              "title": "image",
              "type": "object"
            },
            "imagePullSecrets": {
              "description": "If defined, uses a Secret to pull an image from a private Docker registry or repository.",
              "items": {
                "required": []
              },
              "required": [],
              "title": "imagePullSecrets",
              "type": "array"
            },
            "livenessProbe": {
              "properties": {
                "failureThreshold": {
                  "default": 3,
                  "description": "Failure threshold for livenessProbe",
                  "required": [],
                  "title": "failureThreshold",
                  "type": "integer"
                },
                "initialDelaySeconds": {
                  "default": 120,
                  "description": "Initial delay seconds for livenessProbe",
                  "required": [],
                  "title": "initialDelaySeconds",
                  "type": "integer"
                },
                "periodSeconds": {
                  "default": 530,
                  "description": "Period seconds for livenessProbe",
                  "required": [],
                  "title": "periodSeconds",
                  "type": "integer"
                },
                "successThreshold": {
                  "default": 1,
                  "description": "Success threshold for livenessProbe",
                  "required": [],
                  "title": "successThreshold",
                  "type": "integer"
                },
                "timeoutSeconds": {
                  "default": 5,
                  "description": "Timeout seconds for livenessProbe",
                  "required": [],
                  "title": "timeoutSeconds",
                  "type": "integer"
                }
              },
              "required": [
                "failureThreshold",
                "initialDelaySeconds",
                "periodSeconds",
                "successThreshold",
                "timeoutSeconds"
              ],
              "title": "livenessProbe",
              "type": "object"
            },
            "nodeSelector": {
              "description": "Node labels for pod assignment",
              "required": [],
              "title": "nodeSelector",
              "type": "object"
            },
            "podAnnotations": {
              "description": "Annotations to be added to the frontend pods",
              "required": [],
              "title": "podAnnotations",
              "type": "object"
            },
            "podSecurityContext": {
              "description": "pod-level security context",
              "properties": {
                "fsGroup": {
                  "default": 9999,
                  "required": [],
                  "title": "fsGroup",
                  "type": "integer"
                },
                "runAsGroup": {
                  "default": 9999,
                  "required": [],
                  "title": "runAsGroup",
                  "type": "integer"
                },
                "runAsUser": {
                  "default": 9999,
                  "required": [],
                  "title": "runAsUser",
                  "type": "integer"
                }
              },
              "required": [
                "fsGroup",
                "runAsGroup",
                "runAsUser"
              ],
              "title": "podSecurityContext",
              "type": "object"
            },
            "priorityClassName": {
              "default": "",
              "description": "Pod priority class name",
              "required": [],
              "title": "priorityClassName",
              "type": "string"
            },
            "readinessProbe": {
              "properties": {
                "failureThreshold": {
                  "default": 3,
                  "description": "Failure threshold for readinessProbe",
                  "required": [],
                  "title": "failureThreshold",
                  "type": "integer"
                },
                "initialDelaySeconds": {
                  "default": 120,
                  "description": "Initial delay seconds for readinessProbe",
                  "required": [],
                  "title": "initialDelaySeconds",
                  "type": "integer"
                },
                "periodSeconds": {
                  "default": 30,
                  "description": "Period seconds for readinessProbe",
                  "required": [],
                  "title": "periodSeconds",
                  "type": "integer"
                },
                "successThreshold": {
                  "default": 1,
                  "description": "Success threshold for readinessProbe",
                  "required": [],
                  "title": "successThreshold",
                  "type": "integer"
                },
                "timeoutSeconds": {
                  "default": 5,
                  "description": "Timeout seconds for readinessProbe",
                  "required": [],
                  "title": "timeoutSeconds",
                  "type": "integer"
                }
              },
              "required": [
                "failureThreshold",
                "initialDelaySeconds",
                "periodSeconds",
                "successThreshold",
                "timeoutSeconds"
              ],
              "title": "readinessProbe",
              "type": "object"
            },
            "replicaCount": {
              "default": 1,
              "description": "Number of replicas",
              "required": [],
              "title": "replicaCount",
              "type": "integer"
            },
            "resources": {
              "description": "Resource limits and requests for the controller pods.",
              "required": [],
              "title": "resources",
              "type": "object"
            },
            "revisionHistoryLimit": {
              "default": 10,
              "description": "The number of old ReplicaSets to retain",
              "required": [],
              "title": "revisionHistoryLimit",
              "type": "integer"
            },
            "securityContext": {
              "description": "container-level security context",
              "properties": {
                "runAsGroup": {
                  "default": 9999,
                  "required": [],
                  "title": "runAsGroup",
                  "type": "integer"
                },
                "runAsNonRoot": {
                  "default": true,
                  "required": [],
                  "title": "runAsNonRoot",
                  "type": "boolean"
                },
                "runAsUser": {
                  "default": 9999,
                  "required": [],
                  "title": "runAsUser",
                  "type": "integer"
                }
              },
              "required": [
                "runAsGroup",
                "runAsNonRoot",
                "runAsUser"
              ],
              "title": "securityContext",
              "type": "object"
            },
            "selectorLabels": {
              "description": "Additional labels to add to the pod",
              "required": [],
              "title": "selectorLabels",
              "type": "object"
            },
            "service": {
              "properties": {
                "port": {
                  "default": 8000,
                  "description": "Kubernetes port where service is exposed",
                  "required": [],
                  "title": "port",
                  "type": "integer"
                },
                "type": {
                  "default": "ClusterIP",
                  "description": "Kubernetes service type",
                  "required": [],
                  "title": "type",
                  "type": "string"
                }
              },
              "required": [
                "type",
                "port"
              ],
              "title": "service",
              "type": "object"
            },
            "serviceAccount": {
              "properties": {
                "annotations": {
                  "description": "Annotations to add to the service account",
                  "required": [],
                  "title": "annotations",
                  "type": "object"
                },
                "create": {
                  "default": true,
                  "description": "Specifies whether a service account should be created",
                  "required": [],
                  "title": "create",
                  "type": "boolean"
                },
                "name": {
                  "default": "",
                  "description": "The name of the service account to use.\nIf not set and create is true, a name is generated using the fullname template",
                  "required": [],
                  "title": "name",
                  "type": "string"
                }
              },
              "required": [
                "create",
                "annotations",
                "name"
              ],
              "title": "serviceAccount",
              "type": "object"
            },
            "tolerations": {
              "description": "Toleration labels for pod assignment",
              "items": {
                "required": []
              },
              "required": [],
              "title": "tolerations",
              "type": "array"
            }
          },
          "required": [
            "image",
            "imagePullSecrets",
            "podAnnotations",
            "podSecurityContext",
            "priorityClassName",
            "replicaCount",
            "revisionHistoryLimit",
            "resources",
            "securityContext",
            "serviceAccount",
            "service",
            "autoscaling",
            "livenessProbe",
            "readinessProbe",
            "nodeSelector",
            "tolerations",
            "affinity",
            "selectorLabels",
            "extraEnv"
          ],
          "title": "wsgi",
          "type": "object"
        }
      },
      "required": [
        "asgi",
        "celery",
        "config",
        "persistence",
        "wsgi",
        "ingress"
      ],
      "title": "backend",
      "type": "object"
    },
    "config": {
      "description": "General configuration shared between the frontend and backend",
      "properties": {
        "maxImportFileSizeMb": {
          "default": "512",
          "description": "The maximum file size in mb you can import to create a new table. Default 512Mb.",
          "required": [],
          "title": "maxImportFileSizeMb",
          "type": "string"
        },
        "maxSnapshotsPerGroup": {
          "default": "-1",
          "description": "Controls how many application snapshots can be created per group.",
          "required": [],
          "title": "maxSnapshotsPerGroup",
          "type": "string"
        },
        "publicBackendUrl": {
          "default": "http://localhost:8000",
          "description": "The publicly accessible URL of the backend. Should include the port if non-standard.",
          "required": [],
          "title": "publicBackendUrl",
          "type": "string"
        },
        "publicFrontendUrl": {
          "default": "http://localhost:3000",
          "description": "The publicly accessible URL of the frontend. Should include the port if non-standard.",
          "required": [],
          "title": "publicFrontendUrl",
          "type": "string"
        }
      },
      "required": [
        "maxImportFileSizeMb",
        "maxSnapshotsPerGroup",
        "publicBackendUrl",
        "publicFrontendUrl"
      ],
      "title": "config",
      "type": "object"
    },
    "externalPostgresql": {
      "properties": {
        "auth": {
          "properties": {
            "database": {
              "default": "baserow",
              "description": "Name of the database to use",
              "required": [],
              "title": "database",
              "type": "string"
            },
            "existingSecret": {
              "default": "",
              "description": "Name of existing secret to use for PostgreSQL credentials",
              "required": [],
              "title": "existingSecret",
              "type": "string"
            },
            "password": {
              "default": "baserow",
              "description": "Password to use",
              "required": [],
              "title": "password",
              "type": "string"
            },
            "userPasswordKey": {
              "default": "",
              "description": "Key in the secret containing the password",
              "required": [],
              "title": "userPasswordKey",
              "type": "string"
            },
            "username": {
              "default": "baserow",
              "description": "Name of the user to use",
              "required": [],
              "title": "username",
              "type": "string"
            }
          },
          "required": [
            "database",
            "existingSecret",
            "password",
            "username",
            "userPasswordKey"
          ],
          "title": "auth",
          "type": "object"
        },
        "hostname": {
          "default": "",
          "description": "Hostname of the PostgreSQL database",
          "required": [],
          "title": "hostname",
          "type": "string"
        },
        "port": {
          "default": 5432,
          "description": "Port used to connect to PostgreSQL database",
          "required": [],
          "title": "port",
          "type": "integer"
        }
      },
      "required": [
        "auth",
        "hostname",
        "port"
      ],
      "title": "externalPostgresql",
      "type": "object"
    },
    "externalRedis": {
      "properties": {
        "auth": {
          "properties": {
            "enabled": {
              "default": true,
              "description": "if authentication should be used with external Redis™",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "existingSecret": {
              "default": "",
              "description": "Name of existing secret to use for Redis™ credentials",
              "required": [],
              "title": "existingSecret",
              "type": "string"
            },
            "password": {
              "default": "",
              "description": "Password to use",
              "required": [],
              "title": "password",
              "type": "string"
            },
            "userPasswordKey": {
              "default": "",
              "description": "Key in the secret containing the password",
              "required": [],
              "title": "userPasswordKey",
              "type": "string"
            }
          },
          "required": [
            "enabled",
            "existingSecret",
            "password",
            "userPasswordKey"
          ],
          "title": "auth",
          "type": "object"
        },
        "hostname": {
          "default": "",
          "description": "Hostname of Redis™",
          "required": [],
          "title": "hostname",
          "type": "string"
        },
        "port": {
          "default": 6379,
          "description": "Port used to connect to Redis",
          "required": [],
          "title": "port",
          "type": "integer"
        }
      },
      "required": [
        "auth",
        "hostname",
        "port"
      ],
      "title": "externalRedis",
      "type": "object"
    },
    "frontend": {
      "properties": {
        "affinity": {
          "description": "Affinity settings for pod assignment",
          "required": [],
          "title": "affinity",
          "type": "object"
        },
        "autoscaling": {
          "properties": {
            "enabled": {
              "default": false,
              "description": "Enable Horizontal POD autoscaling",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "maxReplicas": {
              "default": 100,
              "description": "Maximum number of replicas",
              "required": [],
              "title": "maxReplicas",
              "type": "integer"
            },
            "minReplicas": {
              "default": 1,
              "description": "Minimum number of replicas",
              "required": [],
              "title": "minReplicas",
              "type": "integer"
            },
            "targetCPUUtilizationPercentage": {
              "default": 80,
              "description": "Target CPU utilization percentage",
              "required": [],
              "title": "targetCPUUtilizationPercentage",
              "type": "integer"
            },
            "targetMemoryUtilizationPercentage": {
              "default": 80,
              "description": "Target Memory utilization percentage",
              "required": [],
              "title": "targetMemoryUtilizationPercentage",
              "type": "integer"
            }
          },
          "required": [
            "enabled",
            "minReplicas",
            "maxReplicas",
            "targetCPUUtilizationPercentage",
            "targetMemoryUtilizationPercentage"
          ],
          "title": "autoscaling",
          "type": "object"
        },
        "config": {
          "description": "configuration for the frontend",
          "properties": {
            "additionalModules": {
              "default": "",
              "description": "A list of file paths to Nuxt module.js files to load as additional Nuxt modules into Baserow on startup.",
              "required": [],
              "title": "additionalModules",
              "type": "string"
            },
            "disableGoogleDocsFilePreview": {
              "default": "",
              "description": "Set to `true` or `1` to disable Google docs file preview.",
              "required": [],
              "title": "disableGoogleDocsFilePreview",
              "type": "string"
            },
            "disablePublicUrlCheck": {
              "default": "",
              "description": "When opening the Baserow login page a check is run to ensure the PUBLIC_BACKEND_URL/BASEROW_PUBLIC_URL variables are set correctly and your browser can correctly connect to the backend. If misconfigured an error is shown. If you wish to disable this check and warning set this to any non empty value.",
              "required": [],
              "title": "disablePublicUrlCheck",
              "type": "string"
            },
            "downloadFileViaXhr": {
              "default": "0",
              "description": "Set to `1` to force download links to download files via XHR query to bypass `Content-Disposition: inline` that can’t be overridden in another way. If your files are stored under another origin, you also must add CORS headers to your server.",
              "required": [],
              "title": "downloadFileViaXhr",
              "type": "string"
            }
          },
          "required": [
            "additionalModules",
            "disablePublicUrlCheck",
            "disableGoogleDocsFilePreview",
            "downloadFileViaXhr"
          ],
          "title": "config",
          "type": "object"
        },
        "extraEnv": {
          "description": "additional environment variables to be added to the pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraEnv",
          "type": "array"
        },
        "image": {
          "properties": {
            "pullPolicy": {
              "default": "Always",
              "description": "image pull policy",
              "required": [],
              "title": "pullPolicy",
              "type": "string"
            },
            "registry": {
              "default": "docker.io",
              "description": "image registory",
              "required": [],
              "title": "registry",
              "type": "string"
            },
            "repository": {
              "default": "baserow/web-frontend",
              "description": "image repository",
              "required": [],
              "title": "repository",
              "type": "string"
            },
            "tag": {
              "default": "1.34.3",
              "description": "Overrides the image tag",
              "required": [],
              "title": "tag",
              "type": "string"
            }
          },
          "required": [
            "registry",
            "repository",
            "pullPolicy",
            "tag"
          ],
          "title": "image",
          "type": "object"
        },
        "imagePullSecrets": {
          "description": "If defined, uses a Secret to pull an image from a private Docker registry or repository.",
          "items": {
            "required": []
          },
          "required": [],
          "title": "imagePullSecrets",
          "type": "array"
        },
        "ingress": {
          "properties": {
            "annotations": {
              "description": "Additional annotations for the Ingress resource",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "className": {
              "default": "",
              "description": "IngressClass that will be be used to implement the Ingress",
              "required": [],
              "title": "className",
              "type": "string"
            },
            "enabled": {
              "default": false,
              "description": "Enable ingress record generation for the frontend",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "hostname": {
              "default": "chart-example.local",
              "description": "cert-manager.io/cluster-issuer: cluster-issuer-name\nkubernetes.io/ingress.class: nginx\nkubernetes.io/tls-acme: \"true\"\nThe publicly reachable hostname for the frontend",
              "required": [],
              "title": "hostname",
              "type": "string"
            },
            "path": {
              "default": "/",
              "description": "The path under witch the frontend should be reached",
              "required": [],
              "title": "path",
              "type": "string"
            },
            "pathType": {
              "default": "Prefix",
              "description": "Valid values: ImplementationSpecific, Exact, Prefix",
              "required": [],
              "title": "pathType",
              "type": "string"
            },
            "tls": {
              "description": "An array with the tls configuration",
              "items": {
                "required": []
              },
              "required": [],
              "title": "tls",
              "type": "array"
            }
          },
          "required": [
            "enabled",
            "className",
            "annotations",
            "hostname",
            "path",
            "pathType",
            "tls"
          ],
          "title": "ingress",
          "type": "object"
        },
        "livenessProbe": {
          "properties": {
            "initialDelaySeconds": {
              "default": 5,
              "description": "Initial delay seconds for livenessProbe",
              "required": [],
              "title": "initialDelaySeconds",
              "type": "integer"
            },
            "periodSeconds": {
              "default": 5,
              "description": "Period seconds for livenessProbe",
              "required": [],
              "title": "periodSeconds",
              "type": "integer"
            },
            "successThreshold": {
              "default": 1,
              "description": "Success threshold for livenessProbe",
              "required": [],
              "title": "successThreshold",
              "type": "integer"
            }
          },
          "required": [
            "initialDelaySeconds",
            "periodSeconds",
            "successThreshold"
          ],
          "title": "livenessProbe",
          "type": "object"
        },
        "nodeSelector": {
          "description": "Node labels for pod assignment",
          "required": [],
          "title": "nodeSelector",
          "type": "object"
        },
        "podAnnotations": {
          "description": "Annotations to be added to the frontend pods",
          "required": [],
          "title": "podAnnotations",
          "type": "object"
        },
        "podSecurityContext": {
          "description": "pod-level security context",
          "properties": {
            "fsGroup": {
              "default": 9999,
              "required": [],
              "title": "fsGroup",
              "type": "integer"
            },
            "runAsGroup": {
              "default": 9999,
              "required": [],
              "title": "runAsGroup",
              "type": "integer"
            },
            "runAsUser": {
              "default": 9999,
              "required": [],
              "title": "runAsUser",
              "type": "integer"
            }
          },
          "required": [
            "fsGroup",
            "runAsGroup",
            "runAsUser"
          ],
          "title": "podSecurityContext",
          "type": "object"
        },
        "priorityClassName": {
          "default": "",
          "description": "Pod priority class name",
          "required": [],
          "title": "priorityClassName",
          "type": "string"
        },
        "readinessProbe": {
          "properties": {
            "initialDelaySeconds": {
              "default": 5,
              "description": "Initial delay seconds for readinessProbe",
              "required": [],
              "title": "initialDelaySeconds",
              "type": "integer"
            },
            "periodSeconds": {
              "default": 5,
              "description": "Period seconds for readinessProbe",
              "required": [],
              "title": "periodSeconds",
              "type": "integer"
            },
            "successThreshold": {
              "default": 1,
              "description": "Success threshold for readinessProbe",
              "required": [],
              "title": "successThreshold",
              "type": "integer"
            }
          },
          "required": [
            "initialDelaySeconds",
            "periodSeconds",
            "successThreshold"
          ],
          "title": "readinessProbe",
          "type": "object"
        },
        "replicaCount": {
          "default": 1,
          "description": "Number of replicas",
          "required": [],
          "title": "replicaCount",
          "type": "integer"
        },
        "resources": {
          "description": "Resource limits and requests for the controller pods.",
          "required": [],
          "title": "resources",
          "type": "object"
        },
        "revisionHistoryLimit": {
          "default": 10,
          "description": "The number of old ReplicaSets to retain",
          "required": [],
          "title": "revisionHistoryLimit",
          "type": "integer"
        },
        "securityContext": {
          "description": "container-level security context",
          "properties": {
            "runAsGroup": {
              "default": 9999,
              "required": [],
              "title": "runAsGroup",
              "type": "integer"
            },
            "runAsNonRoot": {
              "default": true,
              "required": [],
              "title": "runAsNonRoot",
              "type": "boolean"
            },
            "runAsUser": {
              "default": 9999,
              "required": [],
              "title": "runAsUser",
              "type": "integer"
            }
          },
          "required": [
            "runAsGroup",
            "runAsNonRoot",
            "runAsUser"
          ],
          "title": "securityContext",
          "type": "object"
        },
        "selectorLabels": {
          "description": "Additional labels to add to the pod",
          "required": [],
          "title": "selectorLabels",
          "type": "object"
        },
        "service": {
          "properties": {
            "port": {
              "default": 3000,
              "description": "Kubernetes port where service is exposed",
              "required": [],
              "title": "port",
              "type": "integer"
            },
            "type": {
              "default": "ClusterIP",
              "description": "Kubernetes service type",
              "required": [],
              "title": "type",
              "type": "string"
            }
          },
          "required": [
            "type",
            "port"
          ],
          "title": "service",
          "type": "object"
        },
        "serviceAccount": {
          "properties": {
            "annotations": {
              "description": "Annotations to add to the service account",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "create": {
              "default": true,
              "description": "Specifies whether a service account should be created",
              "required": [],
              "title": "create",
              "type": "boolean"
            },
            "name": {
              "default": "",
              "description": "The name of the service account to use.\nIf not set and create is true, a name is generated using the fullname template",
              "required": [],
              "title": "name",
              "type": "string"
            }
          },
          "required": [
            "create",
            "annotations",
            "name"
          ],
          "title": "serviceAccount",
          "type": "object"
        },
        "tolerations": {
          "description": "Toleration labels for pod assignment",
          "items": {
            "required": []
          },
          "required": [],
          "title": "tolerations",
          "type": "array"
        }
      },
      "required": [
        "image",
        "imagePullSecrets",
        "podAnnotations",
        "podSecurityContext",
        "priorityClassName",
        "replicaCount",
        "revisionHistoryLimit",
        "resources",
        "securityContext",
        "serviceAccount",
        "service",
        "ingress",
        "autoscaling",
        "livenessProbe",
        "readinessProbe",
        "nodeSelector",
        "tolerations",
        "affinity",
        "selectorLabels",
        "extraEnv",
        "config"
      ],
      "title": "frontend",
      "type": "object"
    },
    "fullnameOverride": {
      "default": "",
      "description": "String to fully override `\"baserow.fullname\"`",
      "required": [],
      "title": "fullnameOverride",
      "type": "string"
    },
    "global": {
      "description": "Global values are values that can be accessed from any chart or subchart by exactly the same name.",
      "required": [],
      "title": "global",
      "type": "object"
    },
    "nameOverride": {
      "default": "",
      "description": "Provide a name in place of `baserow`",
      "required": [],
      "title": "nameOverride",
      "type": "string"
    },
    "postgresql": {
      "properties": {
        "auth": {
          "properties": {
            "database": {
              "default": "baserow",
              "description": "Name for a custom database to create",
              "required": [],
              "title": "database",
              "type": "string"
            },
            "existingSecret": {
              "default": "",
              "description": "Name of existing secret to use for PostgreSQL credentials",
              "required": [],
              "title": "existingSecret",
              "type": "string"
            },
            "password": {
              "default": "baserow",
              "description": "Password for the custom user to create. Ignored if postgresql.auth.existingSecret is provided",
              "required": [],
              "title": "password",
              "type": "string"
            },
            "username": {
              "default": "baserow",
              "description": "Name for a custom user to create",
              "required": [],
              "title": "username",
              "type": "string"
            }
          },
          "required": [
            "database",
            "existingSecret",
            "password",
            "username"
          ],
          "title": "auth",
          "type": "object"
        },
        "enabled": {
          "default": true,
          "description": "enable PostgreSQL™ subchart from Bitnami",
          "required": [],
          "title": "enabled",
          "type": "boolean"
        }
      },
      "required": [
        "enabled",
        "auth"
      ],
      "title": "postgresql",
      "type": "object"
    },
    "redis": {
      "properties": {
        "architecture": {
          "default": "standalone",
          "description": "Redis® architecture. Allowed values: standalone or replication",
          "required": [],
          "title": "architecture",
          "type": "string"
        },
        "auth": {
          "properties": {
            "enabled": {
              "default": true,
              "description": "Enable password authentication",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "password": {
              "default": "baserow",
              "description": "Redis™ password",
              "required": [],
              "title": "password",
              "type": "string"
            }
          },
          "required": [
            "enabled",
            "password"
          ],
          "title": "auth",
          "type": "object"
        },
        "enabled": {
          "default": true,
          "description": "enable Redis™ subchart from Bitnami",
          "required": [],
          "title": "enabled",
          "type": "boolean"
        }
      },
      "required": [
        "enabled",
        "architecture",
        "auth"
      ],
      "title": "redis",
      "type": "object"
    }
  },
  "required": [
    "nameOverride",
    "fullnameOverride",
    "frontend",
    "backend",
    "config",
    "postgresql",
    "externalPostgresql",
    "redis",
    "externalRedis"
  ],
  "type": "object"
}
